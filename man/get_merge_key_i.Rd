% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_merge_call.R
\name{get_merge_key_i}
\alias{get_merge_key_i}
\title{Gets keys needed for join call of two selectors}
\usage{
get_merge_key_i(
  selector_list,
  idx,
  dplyr_call_data = get_dplyr_call_data(selector_list)
)
}
\arguments{
\item{selector_list}{(\code{reactive})
output from \code{\link[=data_extract_multiple_srv]{data_extract_multiple_srv()}} or a reactive named list of
outputs from \code{\link[=data_extract_srv]{data_extract_srv()}}.
When using a reactive named list, the names must be identical to the shiny
ids of the respective
\code{\link[=data_extract_ui]{data_extract_ui()}}.}

\item{idx}{(optional \code{integer}) current selector index in all selectors list.}

\item{dplyr_call_data}{(\code{list}) simplified selectors with aggregated set of filters.}
}
\value{
\code{character} list of keys.
}
\description{
Gets keys needed for join call of two selectors
}
\examples{
library(teal.data)
# use non-exported function from teal.transform
get_merge_key_i <- getFromNamespace("get_merge_key_i", "teal.transform")
get_dplyr_call_data <- getFromNamespace("get_dplyr_call_data", "teal.transform")

selector_list <- list(
  list(
    dataname = "X",
    filters = NULL,
    select = "E",
    keys = c("A", "B"),
    reshape = FALSE,
    internal_id = "x"
  ),
  list(
    dataname = "Y",
    filters = NULL,
    select = "G",
    keys = c("A", "C"),
    reshape = FALSE,
    internal_id = "y"
  )
)

join_keys <- join_keys(join_key("X", "Y", c("A", "B")))
get_merge_key_i(selector_list, 2L, get_dplyr_call_data(selector_list, join_keys))

}
\keyword{internal}
