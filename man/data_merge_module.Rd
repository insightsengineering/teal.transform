% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_merge_module.R
\name{data_merge_module}
\alias{data_merge_module}
\title{Data merge module}
\usage{
data_merge_module(
  datasets,
  data_extract,
  input_id,
  merge_function = "dplyr::full_join",
  anl_name = "ANL",
  id = "merge_id"
)
}
\arguments{
\item{datasets}{(\code{FilteredData})\cr
object containing data, see \link[teal.slice:FilteredData]{teal.slice::FilteredData} for more.}

\item{data_extract}{(\code{list} of \code{data_extract_spec})\cr
The usage of named list as input can replace \code{input_id} argument.}

\item{input_id}{(\code{character})\cr
vector of input IDs to read from.
\code{input_id} is optional as a named list in \code{data_extract} can replace it. See example below.}

\item{merge_function}{(\code{character(1)})\cr
A character string of a function that
accepts the arguments \code{x}, \code{y} and \code{by} to perform the merging of datasets.}

\item{anl_name}{(\code{character(1)})\cr
Name of the analysis dataset.}

\item{id}{An ID string that corresponds with the ID used to call the module's
UI function.}
}
\value{
reactive expression with output from \code{\link[=data_merge_srv]{data_merge_srv()}}.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
This function is a convenient wrapper to combine \code{data_extract_multiple_srv()} and
\code{data_merge_srv()} when no additional processing is required.
Compare the example below with that found in \code{\link[=data_merge_srv]{data_merge_srv()}}.
}
\note{
\code{input_id} argument is deprecated and will be removed in future releases.
Please consider using a named list for the \code{data_extract} argument as an alternative.
}
\examples{
library(shiny)

ADSL <- data.frame(
  STUDYID = "A",
  USUBJID = LETTERS[1:10],
  SEX = rep(c("F", "M"), 5),
  AGE = rpois(10, 30),
  BMRKR1 = rlnorm(10)
)
ADLB <- expand.grid(
  STUDYID = "A",
  USUBJID = LETTERS[1:10],
  PARAMCD = c("ALT", "CRP", "IGA"),
  AVISIT = c("SCREENING", "BASELINE", "WEEK 1 DAY 8", "WEEK 2 DAY 15")
)
ADLB$AVAL <- rlnorm(120)
ADLB$CHG <- rnorm(120)

data <- teal.data::cdisc_data(
  teal.data::cdisc_dataset("ADSL", ADSL),
  teal.data::cdisc_dataset("ADLB", ADLB)
)
datasets <- teal.slice:::filtered_data_new(data)
teal.slice:::filtered_data_set(data, datasets)

adsl_extract <- data_extract_spec(
  dataname = "ADSL",
  select = select_spec(
    label = "Select variable:",
    choices = c("AGE", "BMRKR1"),
    selected = "AGE",
    multiple = TRUE,
    fixed = FALSE
  )
)
adlb_extract <- data_extract_spec(
  dataname = "ADLB",
  filter = filter_spec(vars = "PARAMCD", choices = c("ALT", "CRP", "IGA"), selected = "ALT"),
  select = select_spec(
    label = "Select variable:",
    choices = c("AVAL", "CHG"),
    selected = "AVAL",
    multiple = TRUE,
    fixed = FALSE
  )
)
app <- shinyApp(
  ui = fluidPage(
    teal.widgets::standard_layout(
      output = div(
        verbatimTextOutput("expr"),
        dataTableOutput("data")
      ),
      encoding = tagList(
        data_extract_ui("adsl_var", label = "ADSL selection", adsl_extract),
        data_extract_ui("adlb_var", label = "ADLB selection", adlb_extract)
      )
    )
  ),
  server = function(input, output, session) {
    merged_data <- data_merge_module(
      data_extract = list(adsl_var = adsl_extract, adlb_var = adlb_extract),
      datasets = datasets,
      merge_function = "dplyr::left_join"
    )
    output$expr <- renderText(merged_data()$expr)
    output$data <- renderDataTable(merged_data()$data())
  }
)
\dontrun{
runApp(app)
}
}
\seealso{
\code{\link[=data_merge_srv]{data_merge_srv()}}
}
