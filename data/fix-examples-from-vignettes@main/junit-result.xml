<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="Queue" timestamp="2024-02-14T08:11:41Z" hostname="b9d9c728c7ac" tests="21" skipped="0" failures="0" errors="0" time="0.114">
    <testcase time="0.018" classname="Queue" name="Queue_can_be_initialized"/>
    <testcase time="0.0379999999999999" classname="Queue" name="Queue_can_be_initialized"/>
    <testcase time="0.01" classname="Queue" name="size_method_returns_number_of_elements_in_queue"/>
    <testcase time="0.004" classname="Queue" name="push_method_adds_elements_to_queue"/>
    <testcase time="0.001" classname="Queue" name="push_method_adds_elements_to_queue"/>
    <testcase time="0.001" classname="Queue" name="push_method_adds_elements_to_queue"/>
    <testcase time="0.004" classname="Queue" name="push_method_can_add_multiple_elements"/>
    <testcase time="0.003" classname="Queue" name="get_method_returns_elements_of_queue"/>
    <testcase time="0.003" classname="Queue" name="pop_method_removes_first_element_from_queue"/>
    <testcase time="0.001" classname="Queue" name="pop_method_removes_first_element_from_queue"/>
    <testcase time="0.003" classname="Queue" name="remove_method_removes_specified_element_from_queue"/>
    <testcase time="0.002" classname="Queue" name="remove_method_removes_specified_element_from_queue"/>
    <testcase time="0.005" classname="Queue" name="remove_method_removes_specified_element_from_queue"/>
    <testcase time="0.001" classname="Queue" name="remove_method_removes_specified_element_from_queue"/>
    <testcase time="0.001" classname="Queue" name="remove_method_removes_specified_element_from_queue"/>
    <testcase time="0.002" classname="Queue" name="remove_method_removes_specified_element_from_queue"/>
    <testcase time="0.003" classname="Queue" name="remove_method_can_remove_several_elements"/>
    <testcase time="0.001" classname="Queue" name="remove_method_can_remove_several_elements"/>
    <testcase time="0.003" classname="Queue" name="empty_method_removes_all_elements_from_queue"/>
    <testcase time="0.004" classname="Queue" name="empty_method_removes_all_elements_from_queue"/>
    <testcase time="0.00600000000000001" classname="Queue" name="print_method_displays_proper_format"/>
  </testsuite>
  <testsuite name="all_choices" timestamp="2024-02-14T08:11:41Z" hostname="b9d9c728c7ac" tests="1" skipped="0" failures="0" errors="0" time="0.011">
    <testcase time="0.011" classname="all_choices" name="all_choices_constructor_does_not_throw"/>
  </testsuite>
  <testsuite name="check_selector" timestamp="2024-02-14T08:11:42Z" hostname="b9d9c728c7ac" tests="3" skipped="0" failures="0" errors="0" time="0.035">
    <testcase time="0.024" classname="check_selector" name="check_selector_dataname"/>
    <testcase time="0.00600000000000001" classname="check_selector" name="check_selector_dataname"/>
    <testcase time="0.005" classname="check_selector" name="check_selector_dataname"/>
  </testsuite>
  <testsuite name="choices_selected" timestamp="2024-02-14T08:11:42Z" hostname="b9d9c728c7ac" tests="19" skipped="0" failures="0" errors="0" time="0.126">
    <testcase time="0.00800000000000001" classname="choices_selected" name="delayed_version_of_choices_selected"/>
    <testcase time="0.0469999999999999" classname="choices_selected" name="delayed_version_of_choices_selected"/>
    <testcase time="0.00700000000000001" classname="choices_selected" name="delayed_version_of_choices_selected"/>
    <testcase time="0.004" classname="choices_selected" name="delayed_version_of_choices_selected"/>
    <testcase time="0.00700000000000001" classname="choices_selected" name="choices_selected_throws_error_when_selected_is_not_found_in_choices"/>
    <testcase time="0.004" classname="choices_selected" name="choices_selected_throws_error_when_selected_is_not_found_in_choices"/>
    <testcase time="0.005" classname="choices_selected" name="choices_selected_throws_error_when_selected_is_not_found_in_choices"/>
    <testcase time="0.004" classname="choices_selected" name="all_choices_is_the_same_as_selecting_all_choices"/>
    <testcase time="0.00600000000000001" classname="choices_selected" name="choices_selected_throws_when_selected_is_delayed_and_choices_are_not"/>
    <testcase time="0.00600000000000001" classname="choices_selected" name="choices_selected_throws_when_no_select_keyword_is_passed_to_it_as_a_choice"/>
    <testcase time="0.003" classname="choices_selected" name="is_returns_choices_selected_if_passed_a_choices_selected_object"/>
    <testcase time="0.003" classname="choices_selected" name="choices_selected_remove_duplicates"/>
    <testcase time="0.002" classname="choices_selected" name="choices_selected_remove_duplicates"/>
    <testcase time="0.002" classname="choices_selected" name="choices_selected_remove_duplicates"/>
    <testcase time="0.003" classname="choices_selected" name="choices_selected_remove_duplicates"/>
    <testcase time="0.005" classname="choices_selected" name="delayed_version_of_choices_selected_resolve_delayed"/>
    <testcase time="0.005" classname="choices_selected" name="delayed_version_of_choices_selected_resolve_delayed"/>
    <testcase time="0.002" classname="choices_selected" name="delayed_version_of_choices_selected_resolve_delayed"/>
    <testcase time="0.003" classname="choices_selected" name="delayed_version_of_choices_selected_resolve_delayed"/>
  </testsuite>
  <testsuite name="data_extract_datanames" timestamp="2024-02-14T08:11:42Z" hostname="b9d9c728c7ac" tests="19" skipped="0" failures="0" errors="0" time="0.073">
    <testcase time="0.00700000000000001" classname="data_extract_datanames" name="get_extract_datanames_accepts_a_single_data_extract_spec_object"/>
    <testcase time="0.003" classname="data_extract_datanames" name="get_extract_datanames_accepts_a_list_of_data_extract_spec_objects"/>
    <testcase time="0.00399999999999989" classname="data_extract_datanames" name="get_extract_datanames_accepts_a_list_of_lists_of_data_extract_spec_objects"/>
    <testcase time="0.003" classname="data_extract_datanames" name="get_extract_datanames_accepts_a_list_of_data_extract_spec_objects_and_NULL"/>
    <testcase time="0.003" classname="data_extract_datanames" name="get_extract_datanames_accepts_a_list_of_data_extract_spec_objects_and_logical"/>
    <testcase time="0.004" classname="data_extract_datanames" name="get_extract_datanames_accepts_a_list_of_lists_of_data_extract_spec_objects_and_NULL"/>
    <testcase time="0.004" classname="data_extract_datanames" name="get_extract_datanames_accepts_a_list_of_lists_of_data_extract_spec_objects_and_logical"/>
    <testcase time="0.003" classname="data_extract_datanames" name="get_extract_datanames_returns_the_dataname_of_the_single_data_extract_spec_object"/>
    <testcase time="0.001" classname="data_extract_datanames" name="get_extract_datanames_returns_the_dataname_of_the_single_data_extract_spec_object"/>
    <testcase time="0.003" classname="data_extract_datanames" name="get_extract_datanames_returns_the_unique_datanames_from_the_list_of_data_extract_spec_objects"/>
    <testcase time="0.005" classname="data_extract_datanames" name="get_extract_datanames_returns_the_unique_datanames_from_the_list_of_lists_of_data_extract_spec_objects"/>
    <testcase time="0.00600000000000001" classname="data_extract_datanames" name="get_extract_datanames_throws_error_when_no_data_extract_spec_nor_list_of_lists_of_data_extract_spec_is_passed"/>
    <testcase time="0.004" classname="data_extract_datanames" name="get_extract_datanames_throws_error_when_no_data_extract_spec_nor_list_of_lists_of_data_extract_spec_is_passed"/>
    <testcase time="0.005" classname="data_extract_datanames" name="get_extract_datanames_throws_error_when_no_data_extract_spec_nor_list_of_lists_of_data_extract_spec_is_passed"/>
    <testcase time="0.004" classname="data_extract_datanames" name="get_extract_datanames_throws_error_when_no_data_extract_spec_nor_list_of_lists_of_data_extract_spec_is_passed"/>
    <testcase time="0.004" classname="data_extract_datanames" name="get_extract_datanames_throws_error_when_no_data_extract_spec_nor_list_of_lists_of_data_extract_spec_is_passed"/>
    <testcase time="0.00600000000000001" classname="data_extract_datanames" name="get_extract_datanames_throws_error_with_empty_list"/>
    <testcase time="0.003" classname="data_extract_datanames" name="get_extract_datanames_returns_unique_dataname_when_data_extract_specs_have_the_same_dataname"/>
    <testcase time="0.001" classname="data_extract_datanames" name="get_extract_datanames_returns_unique_dataname_when_data_extract_specs_have_the_same_dataname"/>
  </testsuite>
  <testsuite name="data_extract_module" timestamp="2024-02-14T08:11:42Z" hostname="b9d9c728c7ac" tests="11" skipped="0" failures="0" errors="0" time="0.152">
    <testcase time="0.09" classname="data_extract_module" name="Single_filter"/>
    <testcase time="0.002" classname="data_extract_module" name="Single_filter"/>
    <testcase time="0.001" classname="data_extract_module" name="Single_filter"/>
    <testcase time="0.001" classname="data_extract_module" name="Single_filter"/>
    <testcase time="0.0200000000000001" classname="data_extract_module" name="Multiple_filters"/>
    <testcase time="0.00099999999999989" classname="data_extract_module" name="Multiple_filters"/>
    <testcase time="0.002" classname="data_extract_module" name="Multiple_filters"/>
    <testcase time="0.00100000000000011" classname="data_extract_module" name="Multiple_filters"/>
    <testcase time="0.00099999999999989" classname="data_extract_module" name="Multiple_filters"/>
    <testcase time="0.00900000000000012" classname="data_extract_module" name="Multiple_datasets"/>
    <testcase time="0.0239999999999998" classname="data_extract_module" name="Multiple_datasets"/>
  </testsuite>
  <testsuite name="data_extract_multiple_srv" timestamp="2024-02-14T08:11:42Z" hostname="b9d9c728c7ac" tests="14" skipped="0" failures="0" errors="0" time="0.295">
    <testcase time="0.0310000000000001" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_accepts_a_named_list_of_data_extract_spec_"/>
    <testcase time="0.0999999999999999" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_returns_a_named_reactive_list_with_reactives"/>
    <testcase time="0.00300000000000011" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_returns_a_named_reactive_list_with_reactives"/>
    <testcase time="0.00299999999999989" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_returns_a_named_reactive_list_with_reactives"/>
    <testcase time="0.00700000000000012" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_accepts_an_empty_list"/>
    <testcase time="0.00800000000000001" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_returns_an_empty_list_if_passed_an_empty_list"/>
    <testcase time="0.075" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_prunes_NULL_from_the_passed_list"/>
    <testcase time="0.0089999999999999" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_accepts_datasets_as_FilteredData"/>
    <testcase time="0.00700000000000012" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_accepts_datasets_list_of_reactive_data.frame"/>
    <testcase time="0.01" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_accepts_datasets_as_list_of_data.frame"/>
    <testcase time="0.01" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_throws_error_if_datasets_is_not_FilteredData_or_list_of_reactive_data.frame"/>
    <testcase time="0.0109999999999999" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_throws_if_data_extract_is_not_a_named_list"/>
    <testcase time="0.00900000000000012" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_works_with_join_keys_NULL_default_"/>
    <testcase time="0.012" classname="data_extract_multiple_srv" name="data_extract_multiple_srv_accepts_throws_error_when_join_keys_argument_is_not_join_keys_object"/>
  </testsuite>
  <testsuite name="data_extract_spec" timestamp="2024-02-14T08:11:42Z" hostname="b9d9c728c7ac" tests="68" skipped="0" failures="0" errors="0" time="0.452">
    <testcase time="0.012" classname="data_extract_spec" name="data_extract_spec_throws_when_select_is_not_select_spec_or_NULL"/>
    <testcase time="0.00500000000000012" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.00299999999999989" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.00300000000000011" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="data_extract_spec_works_with_valid_input"/>
    <testcase time="0.151" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.002" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00800000000000001" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00300000000000011" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00499999999999989" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00600000000000001" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.002" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.00500000000000012" classname="data_extract_spec" name="delayed_data_extract_spec_works"/>
    <testcase time="0.0349999999999999" classname="data_extract_spec" name="delayed_version_of_data_extract_spec"/>
    <testcase time="0.002" classname="data_extract_spec" name="delayed_version_of_data_extract_spec"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="delayed_version_of_data_extract_spec"/>
    <testcase time="0.0309999999999999" classname="data_extract_spec" name="delayed_version_of_data_extract_spec"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="delayed_version_of_data_extract_spec"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="delayed_version_of_data_extract_spec"/>
    <testcase time="0.00500000000000012" classname="data_extract_spec" name="data_extract_spec_allows_both_select_and_filter_parameters_to_be_NULL"/>
    <testcase time="0.004" classname="data_extract_spec" name="data_extract_spec_returns_filter_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="data_extract_spec_returns_filter_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_returns_filter_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.004" classname="data_extract_spec" name="data_extract_spec_returns_select_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_returns_select_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_returns_select_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.00299999999999989" classname="data_extract_spec" name="data_extract_spec_returns_select_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.002" classname="data_extract_spec" name="data_extract_spec_returns_select_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.00299999999999989" classname="data_extract_spec" name="data_extract_spec_returns_select_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="data_extract_spec_returns_select_spec_with_multiple_set_to_TRUE"/>
    <testcase time="0.0089999999999999" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00499999999999989" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.002" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00800000000000001" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00300000000000011" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.0069999999999999" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00900000000000012" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.00099999999999989" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.002" classname="data_extract_spec" name="delayed_data_extract_spec_works_resolve_delayed"/>
    <testcase time="0.034" classname="data_extract_spec" name="delayed_version_of_data_extract_spec_resolve_delayed"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="delayed_version_of_data_extract_spec_resolve_delayed"/>
    <testcase time="0.002" classname="data_extract_spec" name="delayed_version_of_data_extract_spec_resolve_delayed"/>
    <testcase time="0.03" classname="data_extract_spec" name="delayed_version_of_data_extract_spec_resolve_delayed"/>
    <testcase time="0.00199999999999978" classname="data_extract_spec" name="delayed_version_of_data_extract_spec_resolve_delayed"/>
    <testcase time="0.00100000000000011" classname="data_extract_spec" name="delayed_version_of_data_extract_spec_resolve_delayed"/>
  </testsuite>
  <testsuite name="data_extract_srv" timestamp="2024-02-14T08:11:43Z" hostname="b9d9c728c7ac" tests="47" skipped="0" failures="0" errors="0" time="1.242">
    <testcase time="0.0509999999999999" classname="data_extract_srv" name="data_extract_srv_datasets_accepts_list_of_reactive_data_frames"/>
    <testcase time="0.0310000000000001" classname="data_extract_srv" name="data_extract_srv_datasets_accepts_a_FilteredData"/>
    <testcase time="0.03" classname="data_extract_srv" name="data_extract_srv_datasets_accepts_a_list_of_data_frames"/>
    <testcase time="0.0269999999999999" classname="data_extract_srv" name="data_extract_srv_datasets_accepts_a_mixed_list_of_reactive_and_not_reactive_data_frames"/>
    <testcase time="0.028" classname="data_extract_srv" name="data_extract_srv_works_with_join_keys_NULL_default_"/>
    <testcase time="0.01" classname="data_extract_srv" name="data_extract_srv_accepts_throws_error_when_join_keys_argument_is_not_a_join_keys_object"/>
    <testcase time="0.0390000000000001" classname="data_extract_srv" name="data_extract_srv_returns_a_list_of_elements"/>
    <testcase time="0.00199999999999978" classname="data_extract_srv" name="data_extract_srv_returns_a_list_of_elements"/>
    <testcase time="0.0150000000000001" classname="data_extract_srv" name="data_extract_srv_throws_error_when_data_extract_spec_is_missing"/>
    <testcase time="0.0110000000000001" classname="data_extract_srv" name="data_extract_srv_throws_error_when_data_extract_spec_is_missing"/>
    <testcase time="0.0139999999999998" classname="data_extract_srv" name="data_extract_srv_throws_when_data_extract_spec_don_t_get_data_extract_spec_object"/>
    <testcase time="0.0129999999999999" classname="data_extract_srv" name="data_extract_srv_throws_when_data_extract_spec_don_t_get_data_extract_spec_object"/>
    <testcase time="0.0210000000000004" classname="data_extract_srv" name="data_extract_srv_throws_when_data_extract_spec_don_t_get_data_extract_spec_object"/>
    <testcase time="0.016" classname="data_extract_srv" name="data_extract_srv_throws_when_data_extract_spec_don_t_get_data_extract_spec_object"/>
    <testcase time="0.0169999999999999" classname="data_extract_srv" name="data_extract_srv_throws_when_data_extract_spec_don_t_get_data_extract_spec_object"/>
    <testcase time="0.0169999999999999" classname="data_extract_srv" name="data_extract_srv_throws_when_data_extract_spec_don_t_get_data_extract_spec_object"/>
    <testcase time="0.016" classname="data_extract_srv" name="data_extract_srv_throws_when_data_extract_spec_don_t_get_data_extract_spec_object"/>
    <testcase time="0.0350000000000001" classname="data_extract_srv" name="data_extract_srv_uses_the_current_session_id_when_id_is_missing"/>
    <testcase time="0.00099999999999989" classname="data_extract_srv" name="data_extract_srv_uses_the_current_session_id_when_id_is_missing"/>
    <testcase time="0.0459999999999998" classname="data_extract_srv" name="data_extract_srv_returns_select_ordered_according_to_selection"/>
    <testcase time="0.04" classname="data_extract_srv" name="data_extract_srv_returns_select_ordered_according_to_selection"/>
    <testcase time="0.00600000000000023" classname="data_extract_srv" name="data_extract_srv_returns_select_ordered_according_to_selection"/>
    <testcase time="0.0309999999999997" classname="data_extract_srv" name="data_extract_srv_returns_select_ordered_according_to_choices"/>
    <testcase time="0.00600000000000023" classname="data_extract_srv" name="data_extract_srv_returns_select_ordered_according_to_choices"/>
    <testcase time="0.00599999999999978" classname="data_extract_srv" name="data_extract_srv_returns_select_ordered_according_to_choices"/>
    <testcase time="0.0340000000000003" classname="data_extract_srv" name="data_extract_srv_with_a_list_of_multiple_data_extract_spec"/>
    <testcase time="0.00499999999999989" classname="data_extract_srv" name="data_extract_srv_with_a_list_of_multiple_data_extract_spec"/>
    <testcase time="0.004" classname="data_extract_srv" name="data_extract_srv_with_a_list_of_multiple_data_extract_spec"/>
    <testcase time="0.00600000000000023" classname="data_extract_srv" name="data_extract_srv_with_a_list_of_multiple_data_extract_spec"/>
    <testcase time="0.0869999999999997" classname="data_extract_srv" name="select_validation"/>
    <testcase time="0.0220000000000002" classname="data_extract_srv" name="select_validation"/>
    <testcase time="0.0289999999999999" classname="data_extract_srv" name="select_validation"/>
    <testcase time="0.073" classname="data_extract_srv" name="validation_only_runs_on_currently_selected_dataset_s_data_extract_spec"/>
    <testcase time="0.0569999999999999" classname="data_extract_srv" name="validation_only_runs_on_currently_selected_dataset_s_data_extract_spec"/>
    <testcase time="0.0550000000000002" classname="data_extract_srv" name="filter_validation"/>
    <testcase time="0.00299999999999967" classname="data_extract_srv" name="filter_validation"/>
    <testcase time="0.024" classname="data_extract_srv" name="filter_validation"/>
    <testcase time="0.0540000000000003" classname="data_extract_srv" name="select_validation_accepts_function_as_validator"/>
    <testcase time="0.00300000000000011" classname="data_extract_srv" name="select_validation_accepts_function_as_validator"/>
    <testcase time="0.0189999999999997" classname="data_extract_srv" name="select_validation_accepts_function_as_validator"/>
    <testcase time="0.0620000000000003" classname="data_extract_srv" name="data_extract_multiple_srv_input_validation"/>
    <testcase time="0.044" classname="data_extract_srv" name="data_extract_multiple_srv_input_validation"/>
    <testcase time="0.004" classname="data_extract_srv" name="data_extract_multiple_srv_input_validation"/>
    <testcase time="0.0269999999999997" classname="data_extract_srv" name="data_extract_multiple_srv_input_validation"/>
    <testcase time="0.00300000000000011" classname="data_extract_srv" name="data_extract_multiple_srv_input_validation"/>
    <testcase time="0.0619999999999998" classname="data_extract_srv" name="data_extract_multiple_srv_input_validation"/>
    <testcase time="0.036" classname="data_extract_srv" name="data_extract_multiple_srv_input_validation"/>
  </testsuite>
  <testsuite name="delayed_data_extract" timestamp="2024-02-14T08:11:44Z" hostname="b9d9c728c7ac" tests="5" skipped="0" failures="0" errors="0" time="0.073">
    <testcase time="0.0369999999999999" classname="delayed_data_extract" name="Delayed_data_extract_single_data_connector_with_two_scda_dataset_connectors"/>
    <testcase time="0.00200000000000022" classname="delayed_data_extract" name="Delayed_data_extract_single_data_connector_with_two_scda_dataset_connectors"/>
    <testcase time="0.00599999999999978" classname="delayed_data_extract" name="Delayed_choices_selected_single_data_connector_with_two_scda_dataset_connectors"/>
    <testcase time="0.0270000000000001" classname="delayed_data_extract" name="Delayed_data_extract_filtered"/>
    <testcase time="0.00099999999999989" classname="delayed_data_extract" name="Delayed_data_extract_filtered"/>
  </testsuite>
  <testsuite name="dplyr_call_examples" timestamp="2024-02-14T08:11:44Z" hostname="b9d9c728c7ac" tests="11" skipped="0" failures="0" errors="6" time="0.246">
    <testcase time="0.0270000000000001" classname="dplyr_call_examples" name="Different_join_types"/>
    <testcase time="0.0089999999999999" classname="dplyr_call_examples" name="Different_join_types"/>
    <testcase time="0.00900000000000034" classname="dplyr_call_examples" name="Different_join_types"/>
    <testcase time="0.00499999999999989" classname="dplyr_call_examples" name="Different_join_types"/>
    <testcase time="0.004" classname="dplyr_call_examples" name="Different_join_types"/>
    <testcase time="0.00800000000000001" classname="dplyr_call_examples" name="Single_wide_dataset">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-dplyr_call_examples.R:86:3')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: Must be of type 'list', not 'NULL'.
Backtrace:
    ▆
 1. ├─testthat::expect_identical(...) at test-dplyr_call_examples.R:86:3
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. └─teal.transform:::get_dplyr_call(merged_selectors1, join_keys = jk1)
 5.   └─teal.transform:::get_filter_call(...)
 6.     └─checkmate::assert_list(...)
 7.       └─checkmate::makeAssertion(x, res, .var.name, add)
 8.         └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0449999999999999" classname="dplyr_call_examples" name="Multiple_wide_dataset">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-dplyr_call_examples.R:429:3')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: Must be of type 'list', not 'NULL'.
Backtrace:
    ▆
 1. ├─testthat::expect_identical(...) at test-dplyr_call_examples.R:429:3
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. └─teal.transform:::get_dplyr_call(merged_selectors1[[1]], 1L, jk1)
 5.   └─teal.transform:::get_filter_call(...)
 6.     └─checkmate::assert_list(...)
 7.       └─checkmate::makeAssertion(x, res, .var.name, add)
 8.         └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0350000000000001" classname="dplyr_call_examples" name="Single_long_dataset">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-dplyr_call_examples.R:763:3')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: Must be of type 'list', not 'NULL'.
Backtrace:
    ▆
 1. ├─testthat::expect_identical(...) at test-dplyr_call_examples.R:763:3
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. └─teal.transform:::get_dplyr_call(merged_selectors1, join_keys = jk1)
 5.   └─teal.transform:::get_filter_call(...)
 6.     └─checkmate::assert_list(...)
 7.       └─checkmate::makeAssertion(x, res, .var.name, add)
 8.         └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0229999999999997" classname="dplyr_call_examples" name="Multiple_long_datasets">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-dplyr_call_examples.R:2188:3')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: Must be of type 'list', not 'NULL'.
Backtrace:
    ▆
 1. ├─testthat::expect_identical(...) at test-dplyr_call_examples.R:2188:3
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. └─teal.transform:::get_dplyr_call(merged_selectors1, 1L, jk1)
 5.   └─teal.transform:::get_filter_call(...)
 6.     └─checkmate::assert_list(...)
 7.       └─checkmate::makeAssertion(x, res, .var.name, add)
 8.         └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0230000000000001" classname="dplyr_call_examples" name="Multiple_long_combined_concatenated_filters">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-dplyr_call_examples.R:2981:3')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: Must be of type 'list', not 'NULL'.
Backtrace:
    ▆
 1. ├─testthat::expect_equal(...) at test-dplyr_call_examples.R:2981:3
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. └─teal.transform:::get_dplyr_call(merged_selectors12, 1L, jk12)
 5.   └─teal.transform:::get_filter_call(...)
 6.     └─checkmate::assert_list(...)
 7.       └─checkmate::makeAssertion(x, res, .var.name, add)
 8.         └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0579999999999998" classname="dplyr_call_examples" name="Universal_example">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-dplyr_call_examples.R:3361:3')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─shiny::isolate(...) at test-dplyr_call_examples.R:3361:3
  2. │ ├─shiny::..stacktraceoff..(...)
  3. │ └─ctx$run(...)
  4. │   ├─promises::with_promise_domain(...)
  5. │   │ └─domain$wrapSync(expr)
  6. │   ├─shiny::withReactiveDomain(...)
  7. │   │ └─promises::with_promise_domain(...)
  8. │   │   └─domain$wrapSync(expr)
  9. │   │     └─base::force(expr)
 10. │   └─env$runWith(self, func)
 11. │     └─shiny (local) contextFunc()
 12. │       └─shiny::..stacktraceon..(expr)
 13. └─teal.transform::merge_datasets(...)
 14.   └─base::lapply(...)
 15.     └─teal.transform (local) FUN(X[[i]], ...)
 16.       └─teal.transform:::get_dplyr_call(...)
 17.         └─teal.transform:::get_filter_call(...)
 18.           └─checkmate::assert_list(...)
 19.             └─checkmate::makeAssertion(x, res, .var.name, add)
 20.               └─checkmate:::mstop(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="filter_spec" timestamp="2024-02-14T08:11:44Z" hostname="b9d9c728c7ac" tests="81" skipped="0" failures="0" errors="0" time="0.383">
    <testcase time="0.0330000000000004" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.00499999999999989" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.0089999999999999" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.004" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.00499999999999989" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.00500000000000034" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.004" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.00499999999999989" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.00499999999999989" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.004" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.00499999999999989" classname="filter_spec" name="Proper_argument_types"/>
    <testcase time="0.004" classname="filter_spec" name="Single_choice"/>
    <testcase time="0.00100000000000033" classname="filter_spec" name="Single_choice"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Single_choice"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="Single_choice"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="Single_choice"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Single_choice"/>
    <testcase time="0.00700000000000012" classname="filter_spec" name="Multiple_choices"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="Multiple_choices"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="Multiple_choices"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Multiple_choices"/>
    <testcase time="0.00300000000000011" classname="filter_spec" name="Multiple_choices"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Multiple_choices"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Multiple_choices"/>
    <testcase time="0.00700000000000012" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00499999999999989" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00499999999999989" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00600000000000023" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00300000000000011" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00100000000000033" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="Multiple_vars"/>
    <testcase time="0.004" classname="filter_spec" name="Dropping_keys_attribute"/>
    <testcase time="0.00300000000000011" classname="filter_spec" name="Dropping_keys_attribute"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="Dropping_keys_attribute"/>
    <testcase time="0.00300000000000011" classname="filter_spec" name="Dropping_keys_attribute"/>
    <testcase time="0.00700000000000012" classname="filter_spec" name="delayed_filter_spec"/>
    <testcase time="0.0110000000000001" classname="filter_spec" name="delayed_filter_spec"/>
    <testcase time="0.004" classname="filter_spec" name="filter_spec_with_choices_selected_where_all_selected_in_choices_does_not_throw_an_error"/>
    <testcase time="0.004" classname="filter_spec" name="filter_spec_internal"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="filter_spec_internal"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="filter_spec_internal"/>
    <testcase time="0.00599999999999978" classname="filter_spec" name="filter_spec_internal_contains_dataname"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="filter_spec_internal_contains_dataname"/>
    <testcase time="0.004" classname="filter_spec" name="delayed_filter_spec_works"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="delayed_filter_spec_works"/>
    <testcase time="0.00300000000000011" classname="filter_spec" name="delayed_filter_spec_works"/>
    <testcase time="0.004" classname="filter_spec" name="delayed_filter_spec_works"/>
    <testcase time="0.00599999999999978" classname="filter_spec" name="delayed_version_of_filter_spec"/>
    <testcase time="0.0299999999999998" classname="filter_spec" name="delayed_version_of_filter_spec"/>
    <testcase time="0.00100000000000033" classname="filter_spec" name="delayed_version_of_filter_spec"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="delayed_version_of_filter_spec"/>
    <testcase time="0.004" classname="filter_spec" name="delayed_version_of_filter_spec"/>
    <testcase time="0.0150000000000001" classname="filter_spec" name="delayed_version_of_filter_spec"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="delayed_version_of_filter_spec"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="delayed_version_of_filter_spec"/>
    <testcase time="0.00499999999999989" classname="filter_spec" name="all_choices_passed_to_selected_identical_to_all_choices"/>
    <testcase time="0.00999999999999979" classname="filter_spec" name="delayed_filter_spec_resolve_delayed"/>
    <testcase time="0.0100000000000002" classname="filter_spec" name="delayed_filter_spec_resolve_delayed"/>
    <testcase time="0.004" classname="filter_spec" name="filter_spec_with_choices_selected_where_all_selected_in_choices_does_not_throw_an_error_resolve_delayed"/>
    <testcase time="0.00599999999999978" classname="filter_spec" name="delayed_filter_spec_works_resolve_delayed"/>
    <testcase time="0.00500000000000034" classname="filter_spec" name="delayed_filter_spec_works_resolve_delayed"/>
    <testcase time="0.0089999999999999" classname="filter_spec" name="delayed_version_of_filter_spec_resolve_delayed"/>
    <testcase time="0.0259999999999998" classname="filter_spec" name="delayed_version_of_filter_spec_resolve_delayed"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="delayed_version_of_filter_spec_resolve_delayed"/>
    <testcase time="0.00200000000000022" classname="filter_spec" name="delayed_version_of_filter_spec_resolve_delayed"/>
    <testcase time="0.004" classname="filter_spec" name="delayed_version_of_filter_spec_resolve_delayed"/>
    <testcase time="0.0150000000000001" classname="filter_spec" name="delayed_version_of_filter_spec_resolve_delayed"/>
    <testcase time="0.00099999999999989" classname="filter_spec" name="delayed_version_of_filter_spec_resolve_delayed"/>
    <testcase time="0.00199999999999978" classname="filter_spec" name="delayed_version_of_filter_spec_resolve_delayed"/>
  </testsuite>
  <testsuite name="format_data_extract" timestamp="2024-02-14T08:11:45Z" hostname="b9d9c728c7ac" tests="4" skipped="0" failures="0" errors="0" time="0.043">
    <testcase time="0.00600000000000023" classname="format_data_extract" name="format_data_extract_is_a_function_that_accepts_a_list"/>
    <testcase time="0.00599999999999978" classname="format_data_extract" name="format_data_extract_asserts_its_argument_has_required_names"/>
    <testcase time="0.004" classname="format_data_extract" name="format_data_extract_returns_a_string_representation_of_the_extracted_data"/>
    <testcase time="0.0270000000000001" classname="format_data_extract" name="format_data_extract_integrates_with_data_extract_srv"/>
  </testsuite>
  <testsuite name="get_dplyr_call" timestamp="2024-02-14T08:11:45Z" hostname="b9d9c728c7ac" tests="12" skipped="0" failures="0" errors="3" time="0.125">
    <testcase time="0.00700000000000012" classname="get_dplyr_call" name="get_select_call"/>
    <testcase time="0.00199999999999978" classname="get_dplyr_call" name="get_select_call"/>
    <testcase time="0.00100000000000033" classname="get_dplyr_call" name="get_select_call"/>
    <testcase time="0.00599999999999978" classname="get_dplyr_call" name="get_filter_call">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;SEX&quot;, selected = list(&quot;F&quot;,  ('test-get_dplyr_call.R:18:3')">Error in `get_filter_call(filter = list(list(columns = "SEX", selected = list("F", 
    "M"))))`: Assertion on 'datasets' failed: Must be of type 'list', not 'NULL'.
Backtrace:
    ▆
 1. ├─testthat::expect_equal(...) at test-get_dplyr_call.R:18:3
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. └─teal.transform:::get_filter_call(...)
 5.   └─checkmate::assert_list(...)
 6.     └─checkmate::makeAssertion(x, res, .var.name, add)
 7.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0289999999999999" classname="get_dplyr_call" name="get_rename_call"/>
    <testcase time="0.0129999999999999" classname="get_dplyr_call" name="get_rename_call"/>
    <testcase time="0.012" classname="get_dplyr_call" name="get_rename_call"/>
    <testcase time="0.012" classname="get_dplyr_call" name="get_rename_call"/>
    <testcase time="0.0100000000000002" classname="get_dplyr_call" name="get_reshape_call"/>
    <testcase time="0.00300000000000011" classname="get_dplyr_call" name="get_reshape_call"/>
    <testcase time="0.00699999999999967" classname="get_dplyr_call" name="get_dplyr_call_single_filter_and_single_select">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-get_dplyr_call.R:157:3')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: Must be of type 'list', not 'NULL'.
Backtrace:
    ▆
 1. ├─testthat::expect_equal(...) at test-get_dplyr_call.R:157:3
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. └─teal.transform:::get_dplyr_call(...)
 5.   └─teal.transform:::get_filter_call(...)
 6.     └─checkmate::assert_list(...)
 7.       └─checkmate::makeAssertion(x, res, .var.name, add)
 8.         └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0230000000000001" classname="get_dplyr_call" name="get_dplyr_call_multiple_filter_s_or_multiple_select_s_">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-get_dplyr_call.R:296:3')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: Must be of type 'list', not 'NULL'.
Backtrace:
    ▆
 1. ├─testthat::expect_equal(...) at test-get_dplyr_call.R:296:3
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. └─teal.transform:::get_dplyr_call(...)
 5.   └─teal.transform:::get_filter_call(...)
 6.     └─checkmate::assert_list(...)
 7.       └─checkmate::makeAssertion(x, res, .var.name, add)
 8.         └─checkmate:::mstop(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="get_filter_call-datasets" timestamp="2024-02-14T08:11:45Z" hostname="b9d9c728c7ac" tests="17" skipped="0" failures="1" errors="16" time="0.45">
    <testcase time="0.024" classname="get_filter_call_datasets" name="get_filter_call_throws_error_if_dataset_is_not_a_named_list_of_reactives">
      <failure type="failure" message="`get_filter_call(...)` did not throw an error. ('test-get_filter_call-datasets.R:20:3')">`get_filter_call(...)` did not throw an error.</failure>
    </testcase>
    <testcase time="0.0150000000000001" classname="get_filter_call_datasets" name="get_filter_call_data_NAs_and_one_column_one_selection">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;SEX&quot;, selected = list(NA))),  ('test-get_filter_call-datasets.R:30:3')">Error in `get_filter_call(filter = list(list(columns = "SEX", selected = list(NA))), 
    dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:30:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.028" classname="get_filter_call_datasets" name="get_filter_call_data_NAs_and_one_column_two_selections">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;SEX&quot;, selected = list(NA,  ('test-get_filter_call-datasets.R:41:3')">Error in `get_filter_call(filter = list(list(columns = "SEX", selected = list(NA, 
    "F"))), dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:41:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0249999999999999" classname="get_filter_call_datasets" name="get_filter_call_data_NAs_and_two_columns">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = c(&quot;SEX&quot;, &quot;AGE&quot;),  ('test-get_filter_call-datasets.R:52:3')">Error in `get_filter_call(filter = list(list(columns = c("SEX", "AGE"), 
    selected = list(c("F", "44"), c(NA, "33")))), dataname = "ADAMSET", 
    data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:52:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0239999999999996" classname="get_filter_call_datasets" name="get_filter_call_data_some_of_factor_levels_and_integer">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;SEX&quot;, selected = list(&quot;F&quot;)),  ('test-get_filter_call-datasets.R:63:3')">Error in `get_filter_call(filter = list(list(columns = "SEX", selected = list("F")), 
    list(columns = "AGE", selected = list("42", "35"))), dataname = "ADAMSET", 
    data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:63:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0280000000000005" classname="get_filter_call_datasets" name="get_filter_call_data_trunc_POSIX_and_single_column">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;TRTSDTM&quot;, selected = list(&quot;2020-03-08 06:28:11&quot;))),  ('test-get_filter_call-datasets.R:75:3')">Error in `get_filter_call(filter = list(list(columns = "TRTSDTM", selected = list("2020-03-08 06:28:11"))), 
    dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:75:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0250000000000004" classname="get_filter_call_datasets" name="get_filter_call_data_trunc_POSIX_and_two_columns">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = c(&quot;TRTSDTM&quot;, &quot;AGE&quot;),  ('test-get_filter_call-datasets.R:86:3')">Error in `get_filter_call(filter = list(list(columns = c("TRTSDTM", "AGE"), 
    selected = list(c("2020-03-08 06:28:11", "33"), c("2020-03-09 06:28:11", 
        NA)))), dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:86:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0249999999999995" classname="get_filter_call_datasets" name="get_filter_call_data_SEX_and_two_columns_SEX_variable_is_still_there">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = c(&quot;SEX&quot;, &quot;AGE&quot;),  ('test-get_filter_call-datasets.R:103:3')">Error in `get_filter_call(filter = list(list(columns = c("SEX", "AGE"), 
    selected = list(c("F", "33"), c("M", NA)))), dataname = "ADAMSET", 
    data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:103:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.024" classname="get_filter_call_datasets" name="get_filter_call_data_three_columns">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = c(&quot;SEX&quot;, &quot;AGE&quot;,  ('test-get_filter_call-datasets.R:117:3')">Error in `get_filter_call(filter = list(list(columns = c("SEX", "AGE", 
    "DCSREAS"), selected = list(c("F", "33", NA), c("M", NA, 
    NA)))), dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:117:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.048" classname="get_filter_call_datasets" name="get_filter_call_data_non_empty_filter_as_NA_is_not_selected_and_there_are_missings">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;DCSREAS&quot;, selected = c(&quot;ADVERSE EVENT&quot;,  ('test-get_filter_call-datasets.R:131:3')">Error in `get_filter_call(filter = list(list(columns = "DCSREAS", selected = c("ADVERSE EVENT", 
    "DEATH"))), dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:131:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0250000000000004" classname="get_filter_call_datasets" name="get_filter_call_FALSE_if_empty_selection_for_single">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;DCSREAS&quot;, selected = c())),  ('test-get_filter_call-datasets.R:143:3')">Error in `get_filter_call(filter = list(list(columns = "DCSREAS", selected = c())), 
    dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_identical(...) at test-get_filter_call-datasets.R:143:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0249999999999995" classname="get_filter_call_datasets" name="get_filter_call_data_all_factor_levels_and_integer">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;SEX&quot;, selected = list(&quot;F&quot;,  ('test-get_filter_call-datasets.R:156:3')">Error in `get_filter_call(filter = list(list(columns = "SEX", selected = list("F", 
    "M")), list(columns = "AGE", selected = list("42", "35"))), 
    dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-get_filter_call-datasets.R:156:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0280000000000005" classname="get_filter_call_datasets" name="get_filter_call_data_empty_filter_as_all_levels_and_NA_for_DCSREAS_are_selected">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;DCSREAS&quot;, selected = c(&quot;ADVERSE EVENT&quot;,  ('test-get_filter_call-datasets.R:168:3')">Error in `get_filter_call(filter = list(list(columns = "DCSREAS", selected = c("ADVERSE EVENT", 
    "DEATH", NA))), dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_null(...) at test-get_filter_call-datasets.R:168:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0270000000000001" classname="get_filter_call_datasets" name="get_filter_call_data_empty_as_all_levels_for_SEX_are_selected_no_missings">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;SEX&quot;, selected = list(&quot;F&quot;,  ('test-get_filter_call-datasets.R:175:3')">Error in `get_filter_call(filter = list(list(columns = "SEX", selected = list("F", 
    "M"))), dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_null(...) at test-get_filter_call-datasets.R:175:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0249999999999995" classname="get_filter_call_datasets" name="get_filter_call_skip_if_all_selected_for_single_variable">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = &quot;DCSREAS&quot;, selected = unique(as.character(data_small$DCSREAS)))),  ('test-get_filter_call-datasets.R:183:3')">Error in `get_filter_call(filter = list(list(columns = "DCSREAS", selected = unique(as.character(data_small$DCSREAS)))), 
    dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_null(...) at test-get_filter_call-datasets.R:183:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.024" classname="get_filter_call_datasets" name="get_filter_call_skip_if_all_selected_for_multiple_variables">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = c(&quot;SEX&quot;, &quot;AGE&quot;),  ('test-get_filter_call-datasets.R:198:3')">Error in `get_filter_call(filter = list(list(columns = c("SEX", "AGE"), 
    selected = strsplit(unique(paste(data_small$SEX, data_small$AGE, 
        sep = "-")), "-"))), dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_null(...) at test-get_filter_call-datasets.R:198:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0300000000000002" classname="get_filter_call_datasets" name="get_filter_call_skip_if_all_selected_for_multiple_variables_3_vars">
      <error type="error" message="Error in `get_filter_call(filter = list(list(columns = c(&quot;SEX&quot;, &quot;AGE&quot;,  ('test-get_filter_call-datasets.R:213:3')">Error in `get_filter_call(filter = list(list(columns = c("SEX", "AGE", 
    "DCSREAS"), selected = strsplit(unique(paste(data_small$SEX, 
    data_small$AGE, data_small$DCSREAS, sep = "-")), "-"))), 
    dataname = "ADAMSET", data = data_list)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─testthat::expect_null(...) at test-get_filter_call-datasets.R:213:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─shiny::isolate(...)
  5. │ ├─shiny::..stacktraceoff..(...)
  6. │ └─ctx$run(...)
  7. │   ├─promises::with_promise_domain(...)
  8. │   │ └─domain$wrapSync(expr)
  9. │   ├─shiny::withReactiveDomain(...)
 10. │   │ └─promises::with_promise_domain(...)
 11. │   │   └─domain$wrapSync(expr)
 12. │   │     └─base::force(expr)
 13. │   └─env$runWith(self, func)
 14. │     └─shiny (local) contextFunc()
 15. │       └─shiny::..stacktraceon..(expr)
 16. └─teal.transform:::get_filter_call(...)
 17.   └─checkmate::assert_list(...)
 18.     └─checkmate::makeAssertion(x, res, .var.name, add)
 19.       └─checkmate:::mstop(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="input_checks" timestamp="2024-02-14T08:11:45Z" hostname="b9d9c728c7ac" tests="5" skipped="0" failures="0" errors="0" time="0.041">
    <testcase time="0.0279999999999996" classname="input_checks" name="check_no_multiple_selection_works"/>
    <testcase time="0.00400000000000045" classname="input_checks" name="check_no_multiple_selection_works"/>
    <testcase time="0.00300000000000011" classname="input_checks" name="check_no_multiple_selection_works"/>
    <testcase time="0.00399999999999956" classname="input_checks" name="list_extract_spec_works"/>
    <testcase time="0.00199999999999978" classname="input_checks" name="list_extract_spec_works"/>
  </testsuite>
  <testsuite name="merge_expression_module" timestamp="2024-02-14T08:11:45Z" hostname="b9d9c728c7ac" tests="6" skipped="0" failures="0" errors="1" time="0.133">
    <testcase time="0.016" classname="merge_expression_module" name="merge_expression_module_accepts_a_list_of_data_extract_spec_a_list_of_reactive_data_frames_and_a_join_keys"/>
    <testcase time="0.00800000000000001" classname="merge_expression_module" name="merge_expression_module_returns_a_reactive_containing_a_list"/>
    <testcase time="0.056" classname="merge_expression_module" name="merge_expression_module_returns_a_reactive_containing_a_list">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-merge_expression_module.R:61:7')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─shiny::withReactiveDomain(...) at test-merge_expression_module.R:52:3
  2. │ └─promises::with_promise_domain(...)
  3. │   └─domain$wrapSync(expr)
  4. │     └─base::force(expr)
  5. ├─testthat::expect_is(isolate(output()), "list") at test-merge_expression_module.R:61:7
  6. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  7. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  8. ├─shiny::isolate(output())
  9. │ ├─shiny::..stacktraceoff..(...)
 10. │ └─ctx$run(...)
 11. │   ├─promises::with_promise_domain(...)
 12. │   │ └─domain$wrapSync(expr)
 13. │   ├─shiny::withReactiveDomain(...)
 14. │   │ └─promises::with_promise_domain(...)
 15. │   │   └─domain$wrapSync(expr)
 16. │   │     └─base::force(expr)
 17. │   └─env$runWith(self, func)
 18. │     └─shiny (local) contextFunc()
 19. │       └─shiny::..stacktraceon..(expr)
 20. └─shiny (local) output()
 21.   ├─shiny::..stacktraceoff..(self$.updateValue())
 22.   └─self$.updateValue()
 23.     └─ctx$run(...)
 24.       ├─promises::with_promise_domain(...)
 25.       │ └─domain$wrapSync(expr)
 26.       ├─shiny::withReactiveDomain(...)
 27.       │ └─promises::with_promise_domain(...)
 28.       │   └─domain$wrapSync(expr)
 29.       │     └─base::force(expr)
 30.       └─env$runWith(self, func)
 31.         └─shiny (local) contextFunc()
 32.           ├─base::withCallingHandlers(...)
 33.           ├─base::withVisible(.func())
 34.           └─shiny (local) .func()
 35.             ├─shiny::..stacktraceon..(`&lt;reactive&gt;`(...))
 36.             └─teal.transform (local) `&lt;reactive&gt;`(...)
 37.               └─teal.transform::merge_datasets(...)
 38.                 └─base::lapply(...)
 39.                   └─teal.transform (local) FUN(X[[i]], ...)
 40.                     └─teal.transform:::get_dplyr_call(...)
 41.                       └─teal.transform:::get_filter_call(...)
 42.                         └─checkmate::assert_list(...)
 43.                           └─checkmate::makeAssertion(x, res, .var.name, add)
 44.                             └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0330000000000004" classname="merge_expression_module" name="merge_expression_module_works_if_list_some_elements_of_the_list_are_NULL"/>
    <testcase time="0.00999999999999979" classname="merge_expression_module" name="merge_expression_module_throws_error_if_data_extract_is_not_a_list_of_data_extract_spec"/>
    <testcase time="0.00999999999999979" classname="merge_expression_module" name="merge_expression_module_throws_error_if_data_extract_is_not_a_named_list"/>
  </testsuite>
  <testsuite name="merge_expression_srv" timestamp="2024-02-14T08:11:45Z" hostname="b9d9c728c7ac" tests="23" skipped="0" failures="2" errors="2" time="0.385">
    <testcase time="0.0170000000000003" classname="merge_expression_srv" name="merge_expression_srv_returns_a_reactive_containing_a_list"/>
    <testcase time="0.00999999999999979" classname="merge_expression_srv" name="merge_expression_srv_returns_a_reactive_containing_a_list">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-merge_expression_srv.R:43:7')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─shiny::testServer(...) at test-merge_expression_srv.R:38:3
  2. │ ├─shiny:::withMockContext(...)
  3. │ │ ├─shiny::isolate(...)
  4. │ │ │ ├─shiny::..stacktraceoff..(...)
  5. │ │ │ └─ctx$run(...)
  6. │ │ │   ├─promises::with_promise_domain(...)
  7. │ │ │   │ └─domain$wrapSync(expr)
  8. │ │ │   ├─shiny::withReactiveDomain(...)
  9. │ │ │   │ └─promises::with_promise_domain(...)
 10. │ │ │   │   └─domain$wrapSync(expr)
 11. │ │ │   │     └─base::force(expr)
 12. │ │ │   └─env$runWith(self, func)
 13. │ │ │     └─shiny (local) contextFunc()
 14. │ │ │       └─shiny::..stacktraceon..(expr)
 15. │ │ ├─shiny::withReactiveDomain(...)
 16. │ │ │ └─promises::with_promise_domain(...)
 17. │ │ │   └─domain$wrapSync(expr)
 18. │ │ │     └─base::force(expr)
 19. │ │ └─withr::with_options(...)
 20. │ │   └─base::force(code)
 21. │ └─rlang::eval_tidy(quosure, mask, rlang::caller_env())
 22. ├─testthat::expect_is(session$returned(), "list") at test-merge_expression_srv.R:43:7
 23. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 24. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 25. └─session$returned()
 26.   ├─shiny::..stacktraceoff..(self$.updateValue())
 27.   └─self$.updateValue()
 28.     └─ctx$run(...)
 29.       ├─promises::with_promise_domain(...)
 30.       │ └─domain$wrapSync(expr)
 31.       ├─shiny::withReactiveDomain(...)
 32.       │ └─promises::with_promise_domain(...)
 33.       │   └─domain$wrapSync(expr)
 34.       │     └─base::force(expr)
 35.       └─env$runWith(self, func)
 36.         └─shiny (local) contextFunc()
 37.           ├─base::withCallingHandlers(...)
 38.           ├─base::withVisible(.func())
 39.           └─shiny (local) .func()
 40.             ├─shiny::..stacktraceon..(`&lt;reactive&gt;`(...))
 41.             └─teal.transform (local) `&lt;reactive&gt;`(...)
 42.               └─teal.transform::merge_datasets(...)
 43.                 └─base::lapply(...)
 44.                   └─teal.transform (local) FUN(X[[i]], ...)
 45.                     └─teal.transform:::get_dplyr_call(...)
 46.                       └─teal.transform:::get_filter_call(...)
 47.                         └─checkmate::assert_list(...)
 48.                           └─checkmate::makeAssertion(x, res, .var.name, add)
 49.                             └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0470000000000006" classname="merge_expression_srv" name="merge_expression_srv_throws_error_with_missing_selector_list_and_datasets_arguments"/>
    <testcase time="0.0119999999999996" classname="merge_expression_srv" name="merge_expression_srv_throws_error_with_missing_selector_list_and_datasets_arguments"/>
    <testcase time="0.00800000000000001" classname="merge_expression_srv" name="merge_expression_srv_default_merge_function_is_dplyr_full_join"/>
    <testcase time="0.00800000000000001" classname="merge_expression_srv" name="merge_expression_srv_default_anl_name_is_ANL"/>
    <testcase time="0.00800000000000001" classname="merge_expression_srv" name="merge_expression_srv_default_anl_name_is_ANL"/>
    <testcase time="0.0190000000000001" classname="merge_expression_srv" name="merge_expression_srv_throws_error_when_anl_name_is_not_character_or_using_non_allowed_names"/>
    <testcase time="0.0209999999999999" classname="merge_expression_srv" name="merge_expression_srv_throws_error_when_anl_name_is_not_character_or_using_non_allowed_names"/>
    <testcase time="0.0190000000000001" classname="merge_expression_srv" name="merge_expression_srv_throws_error_when_anl_name_is_not_character_or_using_non_allowed_names"/>
    <testcase time="0.016" classname="merge_expression_srv" name="merge_expression_srv_throws_error_when_anl_name_is_not_character_or_using_non_allowed_names"/>
    <testcase time="0.0170000000000003" classname="merge_expression_srv" name="merge_expression_srv_throws_error_selector_list_is_not_a_list_or_a_reactive"/>
    <testcase time="0.0119999999999996" classname="merge_expression_srv" name="merge_expression_srv_throws_error_selector_list_is_not_a_list_or_a_reactive"/>
    <testcase time="0.0139999999999993" classname="merge_expression_srv" name="merge_expression_srv_throws_error_if_selector_list_is_not_named_list"/>
    <testcase time="0.016" classname="merge_expression_srv" name="merge_expression_srv_accepts_reactive_and_character_merge_function">
      <failure type="failure" message="Expected `shiny::testServer(...)` to run without any errors. ('test-merge_expression_srv.R:176:3')">Expected `shiny::testServer(...)` to run without any errors.
ℹ Actually got a &lt;simpleError&gt; with text:
  Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.</failure>
    </testcase>
    <testcase time="0.016" classname="merge_expression_srv" name="merge_expression_srv_accepts_reactive_and_character_merge_function"/>
    <testcase time="0.0140000000000002" classname="merge_expression_srv" name="merge_expression_srv_accepts_reactive_and_character_merge_function">
      <failure type="failure" message="Expected `shiny::testServer(...)` to run without any errors. ('test-merge_expression_srv.R:184:3')">Expected `shiny::testServer(...)` to run without any errors.
ℹ Actually got a &lt;simpleError&gt; with text:
  Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.</failure>
    </testcase>
    <testcase time="0.00999999999999979" classname="merge_expression_srv" name="merge_expression_srv_accepts_reactive_and_character_merge_function"/>
    <testcase time="0.0270000000000001" classname="merge_expression_srv" name="merge_expression_srv_returns_merge_expression_when_passing_2_extracts_in_selector_list">
      <error type="error" message="Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname,  ('test-merge_expression_srv.R:210:7')">Error in `get_filter_call(selector_list[[idx]]$filters, selector_list[[idx]]$dataname, 
    datasets)`: Assertion on 'datasets' failed: May only contain the following types: {data.frame}, but element 1 has type 'reactiveExpr,reactive,function'.
Backtrace:
     ▆
  1. ├─shiny::testServer(...) at test-merge_expression_srv.R:206:3
  2. │ ├─shiny:::withMockContext(...)
  3. │ │ ├─shiny::isolate(...)
  4. │ │ │ ├─shiny::..stacktraceoff..(...)
  5. │ │ │ └─ctx$run(...)
  6. │ │ │   ├─promises::with_promise_domain(...)
  7. │ │ │   │ └─domain$wrapSync(expr)
  8. │ │ │   ├─shiny::withReactiveDomain(...)
  9. │ │ │   │ └─promises::with_promise_domain(...)
 10. │ │ │   │   └─domain$wrapSync(expr)
 11. │ │ │   │     └─base::force(expr)
 12. │ │ │   └─env$runWith(self, func)
 13. │ │ │     └─shiny (local) contextFunc()
 14. │ │ │       └─shiny::..stacktraceon..(expr)
 15. │ │ ├─shiny::withReactiveDomain(...)
 16. │ │ │ └─promises::with_promise_domain(...)
 17. │ │ │   └─domain$wrapSync(expr)
 18. │ │ │     └─base::force(expr)
 19. │ │ └─withr::with_options(...)
 20. │ │   └─base::force(code)
 21. │ └─rlang::eval_tidy(quosure, mask, rlang::caller_env())
 22. ├─testthat::expect_true(inherits(session$returned()$expr, "list")) at test-merge_expression_srv.R:210:7
 23. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 24. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 25. ├─base::inherits(session$returned()$expr, "list")
 26. └─session$returned()
 27.   ├─shiny::..stacktraceoff..(self$.updateValue())
 28.   └─self$.updateValue()
 29.     └─ctx$run(...)
 30.       ├─promises::with_promise_domain(...)
 31.       │ └─domain$wrapSync(expr)
 32.       ├─shiny::withReactiveDomain(...)
 33.       │ └─promises::with_promise_domain(...)
 34.       │   └─domain$wrapSync(expr)
 35.       │     └─base::force(expr)
 36.       └─env$runWith(self, func)
 37.         └─shiny (local) contextFunc()
 38.           ├─base::withCallingHandlers(...)
 39.           ├─base::withVisible(.func())
 40.           └─shiny (local) .func()
 41.             ├─shiny::..stacktraceon..(`&lt;reactive&gt;`(...))
 42.             └─teal.transform (local) `&lt;reactive&gt;`(...)
 43.               └─teal.transform::merge_datasets(...)
 44.                 └─base::lapply(...)
 45.                   └─teal.transform (local) FUN(X[[i]], ...)
 46.                     └─teal.transform:::get_dplyr_call(...)
 47.                       └─teal.transform:::get_filter_call(...)
 48.                         └─checkmate::assert_list(...)
 49.                           └─checkmate::makeAssertion(x, res, .var.name, add)
 50.                             └─checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0330000000000004" classname="merge_expression_srv" name="merge_expression_srv_throws_error_if_datasets_is_not_a_named_list"/>
    <testcase time="0.0259999999999998" classname="merge_expression_srv" name="merge_expression_srv_throws_error_if_join_keys_is_not_a_join_keys_object"/>
    <testcase time="0.00900000000000034" classname="merge_expression_srv" name="merge_expression_srv_accepts_a_list_of_reactive_data.frames_for_datasets_argument"/>
    <testcase time="0.00599999999999934" classname="merge_expression_srv" name="merge_expression_srv_accepts_a_list_of_reactive_data.frames_for_datasets_argument"/>
  </testsuite>
  <testsuite name="merge_utils" timestamp="2024-02-14T08:11:46Z" hostname="b9d9c728c7ac" tests="36" skipped="0" failures="0" errors="0" time="0.151">
    <testcase time="0.00800000000000001" classname="merge_utils" name="merge_selectors_makes_no_changes_when_single_selector_is_provided"/>
    <testcase time="0.00400000000000045" classname="merge_utils" name="merge_selectors_combines_two_selectors_into_one_if_dataname_filters_keys_reshape_are_identical"/>
    <testcase time="0.00300000000000011" classname="merge_utils" name="merge_selectors_combines_two_selectorsdespite_duplicated_internal_id"/>
    <testcase time="0.00399999999999956" classname="merge_utils" name="Two_pairs_of_selectors_combined_into_two_selectors"/>
    <testcase time="0.00400000000000045" classname="merge_utils" name="merge_does_not_merge_when_reshape_differs"/>
    <testcase time="0.00399999999999956" classname="merge_utils" name="merge_does_not_merge_when_filters_differs"/>
    <testcase time="0.00300000000000011" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00199999999999978" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00200000000000067" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.000999999999999446" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00199999999999978" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00200000000000067" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.000999999999999446" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00200000000000067" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00199999999999978" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.000999999999999446" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00200000000000067" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00199999999999978" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00100000000000033" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00199999999999978" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00199999999999978" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00199999999999978" classname="merge_utils" name="get_merge_key_pair_works"/>
    <testcase time="0.00300000000000011" classname="merge_utils" name="get_merge_call"/>
    <testcase time="0.00700000000000056" classname="merge_utils" name="get_merge_call"/>
    <testcase time="0.00599999999999934" classname="merge_utils" name="get_merge_call"/>
    <testcase time="0.0289999999999999" classname="merge_utils" name="get_merge_call"/>
    <testcase time="0.00300000000000011" classname="merge_utils" name="get_relabel_call"/>
    <testcase time="0.00100000000000033" classname="merge_utils" name="get_relabel_call"/>
    <testcase time="0.00199999999999978" classname="merge_utils" name="get_relabel_call"/>
    <testcase time="0.00400000000000045" classname="merge_utils" name="are_all_keys_provided_returns_TRUE_if_merged_selector_list_has_a_single_element"/>
    <testcase time="0.00499999999999989" classname="merge_utils" name="are_all_keys_provided_returns_FALSE_if_slices_come_from_the_same_dataset_and_the_dataset_has_no_join_keys"/>
    <testcase time="0.00599999999999934" classname="merge_utils" name="are_all_keys_provided_returns_TRUE_if_two_slices_come_from_the_same_dataset_and_the_dataset_has_the_join_keys"/>
    <testcase time="0.00500000000000078" classname="merge_utils" name="are_all_keys_provided_returns_TRUE_if_no_slices_are_passed"/>
    <testcase time="0.0129999999999999" classname="merge_utils" name="are_all_keys_provided_returns_TRUE_if_three_slices_from_different_datasets_are_provided_and_have_the_join_keys"/>
    <testcase time="0.00399999999999956" classname="merge_utils" name="validate_keys_sufficient_returns_TRUE_for_empty_inputs"/>
    <testcase time="0.00700000000000056" classname="merge_utils" name="validate_keys_sufficient_raises_an_error_for_two_slices_with_no_join_keys"/>
  </testsuite>
  <testsuite name="resolve" timestamp="2024-02-14T08:11:46Z" hostname="b9d9c728c7ac" tests="16" skipped="0" failures="0" errors="0" time="0.167">
    <testcase time="0.0499999999999998" classname="resolve" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00399999999999956" classname="resolve" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00499999999999989" classname="resolve" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00400000000000045" classname="resolve" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00499999999999989" classname="resolve" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00399999999999956" classname="resolve" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00500000000000078" classname="resolve" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.000999999999999446" classname="resolve" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00100000000000033" classname="resolve" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.0449999999999999" classname="resolve" name="resolve.list_works_correctly"/>
    <testcase time="0.00900000000000034" classname="resolve" name="resolve_throws_error_with_non_reactive_data.frames_or_unnamed_list_as_input_to_datasets"/>
    <testcase time="0.00699999999999967" classname="resolve" name="resolve_throws_error_with_non_reactive_data.frames_or_unnamed_list_as_input_to_datasets"/>
    <testcase time="0.00800000000000001" classname="resolve" name="resolve_throws_error_with_unnamed_list_or_wrong_names_as_input_to_keys"/>
    <testcase time="0.00600000000000023" classname="resolve" name="resolve_throws_error_with_unnamed_list_or_wrong_names_as_input_to_keys"/>
    <testcase time="0.00800000000000001" classname="resolve" name="resolve_throws_error_with_missing_arguments"/>
    <testcase time="0.00499999999999989" classname="resolve" name="resolve_throws_error_with_missing_arguments"/>
  </testsuite>
  <testsuite name="resolve_delayed" timestamp="2024-02-14T08:11:46Z" hostname="b9d9c728c7ac" tests="14" skipped="0" failures="0" errors="0" time="0.285">
    <testcase time="0.0119999999999996" classname="resolve_delayed" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00499999999999989" classname="resolve_delayed" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00400000000000045" classname="resolve_delayed" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00399999999999956" classname="resolve_delayed" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00499999999999989" classname="resolve_delayed" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00400000000000045" classname="resolve_delayed" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00499999999999989" classname="resolve_delayed" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.00100000000000033" classname="resolve_delayed" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.000999999999999446" classname="resolve_delayed" name="resolve_delayed_expr_works_correctly"/>
    <testcase time="0.0790000000000006" classname="resolve_delayed" name="resolve_delayed.FilteredData_works_correctly"/>
    <testcase time="0.0759999999999996" classname="resolve_delayed" name="resolve_delayed.list_works_correctly_with_reactive_objects"/>
    <testcase time="0.0780000000000003" classname="resolve_delayed" name="resolve_delayed.list_works_correctly_with_non_reactive_objects"/>
    <testcase time="0.00800000000000001" classname="resolve_delayed" name="resolving_delayed_choices_removes_selected_not_in_choices_and_give_a_log_output"/>
    <testcase time="0.00300000000000011" classname="resolve_delayed" name="resolving_delayed_choices_removes_selected_not_in_choices_and_give_a_log_output"/>
  </testsuite>
  <testsuite name="select_spec" timestamp="2024-02-14T08:11:46Z" hostname="b9d9c728c7ac" tests="59" skipped="0" failures="0" errors="0" time="0.188">
    <testcase time="0.00800000000000001" classname="select_spec" name="Proper_argument_types"/>
    <testcase time="0.00899999999999945" classname="select_spec" name="Proper_argument_types"/>
    <testcase time="0.00600000000000023" classname="select_spec" name="Proper_argument_types"/>
    <testcase time="0.00600000000000023" classname="select_spec" name="Proper_argument_types"/>
    <testcase time="0.00399999999999956" classname="select_spec" name="Proper_argument_types"/>
    <testcase time="0.00499999999999989" classname="select_spec" name="Proper_argument_types"/>
    <testcase time="0.00400000000000045" classname="select_spec" name="Proper_argument_types"/>
    <testcase time="0.00399999999999956" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00200000000000067" classname="select_spec" name="Single_choice"/>
    <testcase time="0.000999999999999446" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00100000000000033" classname="select_spec" name="Single_choice"/>
    <testcase time="0.000999999999999446" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00100000000000033" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00100000000000033" classname="select_spec" name="Single_choice"/>
    <testcase time="0.000999999999999446" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00100000000000033" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="Single_choice"/>
    <testcase time="0.00600000000000023" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00200000000000067" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.000999999999999446" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00100000000000033" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00100000000000033" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00100000000000033" classname="select_spec" name="Multiple_choices"/>
    <testcase time="0.00499999999999989" classname="select_spec" name="resolve_select_spec_works"/>
    <testcase time="0.000999999999999446" classname="select_spec" name="resolve_select_spec_works"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="resolve_select_spec_works"/>
    <testcase time="0.00499999999999989" classname="select_spec" name="delayed_version_of_select_spec"/>
    <testcase time="0.0110000000000001" classname="select_spec" name="delayed_version_of_select_spec"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="delayed_version_of_select_spec"/>
    <testcase time="0.00600000000000023" classname="select_spec" name="delayed_version_of_select_spec"/>
    <testcase time="0.00399999999999956" classname="select_spec" name="all_choices_passed_to_selected_is_the_same_as_passing_all_choices"/>
    <testcase time="0.00499999999999989" classname="select_spec" name="multiple_is_set_to_TRUE_if_all_choices_is_passed_to_selected"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="multiple_is_set_to_TRUE_if_all_choices_is_passed_to_selected"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="default_values"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="default_values"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="default_values"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="default_values"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="default_values"/>
    <testcase time="0.00100000000000033" classname="select_spec" name="default_values"/>
    <testcase time="0.00499999999999989" classname="select_spec" name="resolve_delayed_select_spec_works_resolve_delayed"/>
    <testcase time="0.000999999999999446" classname="select_spec" name="resolve_delayed_select_spec_works_resolve_delayed"/>
    <testcase time="0.00300000000000011" classname="select_spec" name="resolve_delayed_select_spec_works_resolve_delayed"/>
    <testcase time="0.00400000000000045" classname="select_spec" name="delayed_version_of_select_spec_resolve_delayed"/>
    <testcase time="0.00699999999999967" classname="select_spec" name="delayed_version_of_select_spec_resolve_delayed"/>
    <testcase time="0.00199999999999978" classname="select_spec" name="delayed_version_of_select_spec_resolve_delayed"/>
    <testcase time="0.00400000000000045" classname="select_spec" name="delayed_version_of_select_spec_resolve_delayed"/>
  </testsuite>
  <testsuite name="value_choices" timestamp="2024-02-14T08:11:47Z" hostname="b9d9c728c7ac" tests="21" skipped="0" failures="0" errors="0" time="0.146">
    <testcase time="0.0110000000000001" classname="value_choices" name="Will_output_warnings_when_value_choices_applied_on_datasets_with_missing_values_and_or_labels"/>
    <testcase time="0.00399999999999956" classname="value_choices" name="Will_output_warnings_when_value_choices_applied_on_datasets_with_missing_values_and_or_labels"/>
    <testcase time="0.00400000000000045" classname="value_choices" name="Will_output_warnings_when_value_choices_applied_on_datasets_with_missing_values_and_or_labels"/>
    <testcase time="0.00499999999999989" classname="value_choices" name="Will_output_warnings_when_value_choices_applied_on_datasets_with_missing_values_and_or_labels"/>
    <testcase time="0.00399999999999956" classname="value_choices" name="Will_output_warnings_when_value_choices_applied_on_datasets_with_missing_values_and_or_labels"/>
    <testcase time="0.00500000000000078" classname="value_choices" name="Will_output_warnings_when_value_choices_applied_on_datasets_with_missing_values_and_or_labels"/>
    <testcase time="0.00999999999999979" classname="value_choices" name="Will_output_warnings_when_value_choices_applied_on_datasets_with_missing_values_and_or_labels"/>
    <testcase time="0.00399999999999956" classname="value_choices" name="Will_output_warnings_when_value_choices_applied_on_datasets_with_missing_values_and_or_labels"/>
    <testcase time="0.00400000000000045" classname="value_choices" name="Will_output_warnings_when_value_choices_applied_on_datasets_with_missing_values_and_or_labels"/>
    <testcase time="0.00399999999999956" classname="value_choices" name="delayed_version_of_value_choices"/>
    <testcase time="0.0120000000000005" classname="value_choices" name="delayed_version_of_value_choices"/>
    <testcase time="0.00199999999999978" classname="value_choices" name="delayed_version_of_value_choices"/>
    <testcase time="0.0119999999999996" classname="value_choices" name="delayed_version_of_value_choices"/>
    <testcase time="0.00200000000000067" classname="value_choices" name="delayed_version_of_value_choices"/>
    <testcase time="0.0129999999999999" classname="value_choices" name="delayed_version_of_value_choices"/>
    <testcase time="0.00300000000000011" classname="value_choices" name="delayed_version_of_value_choices_resolve_delayed"/>
    <testcase time="0.0129999999999999" classname="value_choices" name="delayed_version_of_value_choices_resolve_delayed"/>
    <testcase time="0.000999999999999446" classname="value_choices" name="delayed_version_of_value_choices_resolve_delayed"/>
    <testcase time="0.0120000000000005" classname="value_choices" name="delayed_version_of_value_choices_resolve_delayed"/>
    <testcase time="0.000999999999999446" classname="value_choices" name="delayed_version_of_value_choices_resolve_delayed"/>
    <testcase time="0.0200000000000005" classname="value_choices" name="delayed_version_of_value_choices_resolve_delayed"/>
  </testsuite>
  <testsuite name="variable_choices" timestamp="2024-02-14T08:11:47Z" hostname="b9d9c728c7ac" tests="15" skipped="0" failures="0" errors="0" time="0.045">
    <testcase time="0.00699999999999967" classname="variable_choices" name="Can_create_variable_choices_with_datasets_with_no_or_missing_labels"/>
    <testcase time="0.00199999999999978" classname="variable_choices" name="Can_create_variable_choices_with_datasets_with_no_or_missing_labels"/>
    <testcase time="0.00200000000000067" classname="variable_choices" name="Can_create_variable_choices_with_datasets_with_no_or_missing_labels"/>
    <testcase time="0.00299999999999923" classname="variable_choices" name="delayed_version_of_variable_choices"/>
    <testcase time="0.00400000000000045" classname="variable_choices" name="delayed_version_of_variable_choices"/>
    <testcase time="0.00199999999999978" classname="variable_choices" name="delayed_version_of_variable_choices"/>
    <testcase time="0.00300000000000011" classname="variable_choices" name="delayed_version_of_variable_choices"/>
    <testcase time="0.00199999999999978" classname="variable_choices" name="delayed_version_of_variable_choices"/>
    <testcase time="0.00300000000000011" classname="variable_choices" name="delayed_version_of_variable_choices"/>
    <testcase time="0.00400000000000045" classname="variable_choices" name="delayed_version_of_variable_choices_resolve_delayed"/>
    <testcase time="0.00299999999999923" classname="variable_choices" name="delayed_version_of_variable_choices_resolve_delayed"/>
    <testcase time="0.00200000000000067" classname="variable_choices" name="delayed_version_of_variable_choices_resolve_delayed"/>
    <testcase time="0.00300000000000011" classname="variable_choices" name="delayed_version_of_variable_choices_resolve_delayed"/>
    <testcase time="0.00199999999999978" classname="variable_choices" name="delayed_version_of_variable_choices_resolve_delayed"/>
    <testcase time="0.00300000000000011" classname="variable_choices" name="delayed_version_of_variable_choices_resolve_delayed"/>
  </testsuite>
</testsuites>
